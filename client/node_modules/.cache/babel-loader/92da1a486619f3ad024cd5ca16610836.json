{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pmiranda/Documents/Udemy/copitienda/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSagas);import{takeEvery,call,put,all}from'redux-saga/effects';import{firestore,convertCollectionsSnapshopToMap}from'../../firebase/firebase.utils';import{fetchCollectionsSuccess,fetchCollectionsFailure}from'./shop.actions';import ShopActionTypes from'./shop.types';export function fetchCollectionsAsync(){var collectionRef,snapshot,collectionsMap;return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionRef=firestore.collection('collections');_context.next=4;return collectionRef.get();case 4:snapshot=_context.sent;_context.next=7;return call(convertCollectionsSnapshopToMap,snapshot);case 7:collectionsMap=_context.sent;_context.next=10;return put(fetchCollectionsSuccess(collectionsMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fetchCollectionsFailure(_context.t0.message));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}export function fetchCollectionsStart(){return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START,fetchCollectionsAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSagas(){return _regeneratorRuntime.wrap(function shopSagas$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionsStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/Users/pmiranda/Documents/Udemy/copitienda/client/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","shopSagas","takeEvery","call","put","all","firestore","convertCollectionsSnapshopToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":"iNAKiBA,qB,iDAYAC,qB,iDAOAC,S,EAxBjB,OAAQC,SAAR,CAAmBC,IAAnB,CAAyBC,GAAzB,CAA8BC,GAA9B,KAAwC,oBAAxC,CACA,OAAQC,SAAR,CAAmBC,+BAAnB,KAAyD,+BAAzD,CACA,OAAQC,uBAAR,CAAiCC,uBAAjC,KAA+D,gBAA/D,CACA,MAAOC,CAAAA,eAAP,KAA4B,cAA5B,CAEA,MAAO,SAAUX,CAAAA,qBAAV,2LAGOY,aAHP,CAGsBL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAHtB,iBAIkB,MAAMD,CAAAA,aAAa,CAACE,GAAd,EAAN,CAJlB,OAIOC,QAJP,+BAKwB,MAAMX,CAAAA,IAAI,CAACI,+BAAD,CAAkCO,QAAlC,CAAV,CALxB,OAKOC,cALP,gCAMC,MAAMX,CAAAA,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT,CAND,0GAQC,MAAMX,CAAAA,GAAG,CAACK,uBAAuB,CAAC,YAAMO,OAAP,CAAxB,CAAT,CARD,qEAYP,MAAO,SAAUhB,CAAAA,qBAAV,qJACH,MAAME,CAAAA,SAAS,CACXQ,eAAe,CAACO,uBADL,CAEXlB,qBAFW,CAAf,CADG,wDAOP,MAAO,SAAUE,CAAAA,SAAV,yIACH,MAAMI,CAAAA,GAAG,CAAC,CAACF,IAAI,CAACH,qBAAD,CAAL,CAAD,CAAT,CADG","sourcesContent":["import {takeEvery, call, put, all} from 'redux-saga/effects';\nimport {firestore, convertCollectionsSnapshopToMap} from '../../firebase/firebase.utils'\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions'\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n    \n    try{\n        const collectionRef= firestore.collection('collections');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionsSnapshopToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap));\n    }catch(error){\n        yield put(fetchCollectionsFailure(error.message))\n    }\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n        );\n}\n\nexport function* shopSagas(){\n    yield all([call(fetchCollectionsStart)])\n}"]},"metadata":{},"sourceType":"module"}